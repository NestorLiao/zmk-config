#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>


#define ZMK_POINTING_DEFAULT_MOVE_VAL 450  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // default: 10

// Layer Definition
#define BASE   0
#define NAV    1
#define NUM    2
#define MOUSE  3
#define SYM    4
#define FUN    5
#define MEDIA  6

#define QUICK_TAP_MS 145

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

&mmv {
    x-input-code             = <INPUT_REL_X>;
    y-input-code             = <INPUT_REL_Y>;
    time-to-max-speed-ms     = <300>;
    acceleration-exponent    = <0>;
};

&msc {
    x-input-code             = <INPUT_REL_HWHEEL>;
    y-input-code             = <INPUT_REL_WHEEL>;
    time-to-max-speed-ms     = <300>;
    acceleration-exponent    = <0>;
};

 / {


    macros {
    hello_world: hello_world {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp H &kp E &kp L &kp L &kp O &kp COMMA &kp SPACE>
            , <&macro_tap &kp W &kp O &kp R &kp L &kp D &kp EXCL>;
    };

    explain_chinese: explain_chinese {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap 
                &kp E &kp X &kp P &kp L &kp A &kp I &kp N &kp SPACE
                &kp I &kp N &kp SPACE &kp C &kp H &kp I &kp N &kp E &kp S &kp E &kp COMMA
                &kp SPACE &kp T &kp H &kp A &kp N &kp K &kp SPACE &kp Y &kp O &kp U &kp EXCL>;
    };

    explain_logically: explain_logically {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap 
                &kp P &kp R &kp O &kp V &kp I &kp D &kp E &kp SPACE 
                &kp S &kp T &kp R &kp U &kp C &kp T &kp U &kp R &kp E &kp D &kp SPACE
                &kp A &kp N &kp D &kp SPACE &kp L &kp O &kp G &kp I &kp C &kp A &kp L &kp L &kp Y>;
    };

    base_on_facts: base_on_facts {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap 
                &kp B &kp A &kp S &kp E &kp SPACE &kp Y &kp O &kp U &kp R &kp SPACE
                &kp R &kp E &kp S &kp P &kp O &kp N &kp S &kp E &kp SPACE &kp O &kp N &kp SPACE
                &kp F &kp A &kp C &kp T &kp S>;
    };

        emacs_c_c_c_dt: emacs_c_c_c_dt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
               = <&macro_press &kp LCTRL>   // Press Ctrl
                , <&macro_tap &kp C>         // Tap 'g' while Ctrl is held
                , <&macro_tap &kp DOT>         // Tap 'g' while Ctrl is held
                , <&macro_release &kp LCTRL> // Release Ctrl
                ;
        };

        emacs_c_x_x_t: emacs_c_x_x_t {
           compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
               = <&macro_press &kp LCTRL>   // Press Ctrl
                , <&macro_tap &kp N>         // Tap 'g' while Ctrl is held
                , <&macro_release &kp LCTRL> // Release Ctrl
                , <&macro_tap &kp X>         // Tap 'g' while Ctrl is held
                , <&macro_tap &kp T>         // Tap 'g' while Ctrl is held
                ;
        };
// copy/down/up/fullscreen/toggle/ cduftabr
         s_d: s_d {
           compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
               = <&macro_press &kp RGUI>   // Press Ctrl
                , <&macro_tap &kp D>         // Tap 'g' while Ctrl is held
                , <&macro_release &kp RGUI> // Release Ctrl
                ;
        };

         s_c: s_c {
           compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
               = <&macro_press &kp RGUI>   // Press Ctrl
                , <&macro_tap &kp C>         // Tap 'c' while Ctrl is held
                , <&macro_release &kp RGUI> // Release Ctrl
                ;
        };

         s_u: s_u {
           compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
               = <&macro_press &kp RGUI>   // Press Ctrl
                , <&macro_tap &kp U>         // Tap 'g' while Ctrl is held
                , <&macro_release &kp RGUI> // Release Ctrl
                ;
        };

         s_z: s_z {
           compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
               = <&macro_press &kp RGUI>   // Press Ctrl
                , <&macro_tap &kp Z>         // Tap 'g' while Ctrl is held
                , <&macro_release &kp RGUI> // Release Ctrl
                ;
        };


         s_q: s_q {
           compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
               = <&macro_press &kp RGUI>   // Press Ctrl
                , <&macro_tap &kp Q>         // Tap 'g' while Ctrl is held
                , <&macro_release &kp RGUI> // Release Ctrl
                ;
        };



         s_f: s_f {
           compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
               = <&macro_press &kp RGUI>   // Press Ctrl
                , <&macro_tap &kp F>         // Tap 'g' while Ctrl is held
                , <&macro_release &kp RGUI> // Release Ctrl
                ;
        };

         s_tab: s_tab {
           compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
               = <&macro_press &kp RGUI>   // Press Ctrl
                , <&macro_tap &kp TAB>         // Tap 'g' while Ctrl is held
                , <&macro_release &kp RGUI> // Release Ctrl
                ;
        };

         s_r: s_r {
           compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
               = <&macro_press &kp LGUI>   // Press Ctrl
                , <&macro_tap &kp R>         // Tap 'g' while Ctrl is held
                , <&macro_release &kp LGUI> // Release Ctrl
                ;
        };


        emacs_c_x_o: emacs_c_x_o {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
               = <&macro_press &kp LCTRL>   // Press Ctrl
                , <&macro_tap &kp N>         // Tap 'g' while Ctrl is held
                , <&macro_release &kp LCTRL> // Release Ctrl
                , <&macro_tap &kp O>         // Tap 'g' while Ctrl is held
                ;
        };


        emacs_c_x_p_s: emacs_c_x_p_s {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>   // Press Ctrl
                , <&macro_tap &kp N>         // Tap 'g' while Ctrl is held
                , <&macro_release &kp LCTRL> // Release Ctrl
                , <&macro_tap &kp P>         // Tap 'g' while Ctrl is held
                , <&macro_tap &kp S>         // Tap 'g' while Ctrl is held
                ;
        };


    emacs_c_x_g: emacs_c_x_g {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp N>         // Tap 'x' while Ctrl is held
            , <&macro_release &kp LCTRL> // Release Ctrl
            , <&macro_tap &kp G>;        // Tap 'g' while Ctrl is held
    };

    emacs_c_x_b: emacs_c_x_b {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp N>         // Tap 'x' while Ctrl is held
            , <&macro_release &kp LCTRL> // Release Ctrl
            , <&macro_tap &kp B>;        // Tap 'b' while Ctrl is held
    };

    emacs_c_x_d: emacs_c_x_d {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp N>         // Tap 'x' while Ctrl is held
            , <&macro_release &kp LCTRL> // Release Ctrl
            , <&macro_tap &kp D>;        // Tap 'd' while Ctrl is held
    };

    emacs_c_x_c_a: emacs_c_x_c_a {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp N>         // Tap 'x' while Ctrl is held
            , <&macro_tap &kp A>     // Tap 'space' while Ctrl is held
            , <&macro_release &kp LCTRL>; // Release Ctrl
    };


    emacs_c_x_c_sm: emacs_c_x_c_sm  {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp N>         // Tap 'x' while Ctrl is held
            , <&macro_tap &kp SEMI>         // Tap 'f' while Ctrl is held
            , <&macro_release &kp LCTRL> // Release Ctrl
            ;
    };



    emacs_c_x_c_space: emacs_c_x_c_space {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp N>         // Tap 'x' while Ctrl is held
            , <&macro_tap &kp SPACE>     // Tap 'space' while Ctrl is held
            , <&macro_release &kp LCTRL>; // Release Ctrl
    };


    emacs_c_x_j: emacs_c_x_j {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp N>         // Tap 'x' while Ctrl is held
            , <&macro_release &kp LCTRL> // Release Ctrl
            , <&macro_tap &kp J>;         // Tap 'k' while Ctrl is held
    };


    emacs_c_x_l: emacs_c_x_l {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp N>         // Tap 'x' while Ctrl is held
            , <&macro_release &kp LCTRL> // Release Ctrl
            , <&macro_tap &kp L>;         // Tap 'k' while Ctrl is held
    };


    emacs_c_x_9: emacs_c_x_9 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp N>         // Tap 'x' while Ctrl is held
            , <&macro_release &kp LCTRL> // Release Ctrl
            , <&macro_tap &kp N9>;         // Tap 'k' while Ctrl is held
    };


    emacs_c_c_7: emacs_c_c_7 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp C>         // Tap 'c' while Ctrl is held
            , <&macro_release &kp LCTRL> // Release Ctrl
            , <&macro_tap &kp N7>;         // Tap 'k' while Ctrl is held
    };


    emacs_c_c_8: emacs_c_c_8 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp C>         // Tap 'c' while Ctrl is held
            , <&macro_release &kp LCTRL> // Release Ctrl
            , <&macro_tap &kp N8>;         // Tap 'k' while Ctrl is held
    };


    emacs_c_x_8: emacs_c_x_8 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp N>         // Tap 'x' while Ctrl is held
            , <&macro_release &kp LCTRL> // Release Ctrl
            , <&macro_tap &kp N8>;         // Tap 'k' while Ctrl is held
    };

    emacs_c_x_7: emacs_c_x_7 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp N>         // Tap 'x' while Ctrl is held
            , <&macro_release &kp LCTRL> // Release Ctrl
            , <&macro_tap &kp N7>;         // Tap 'k' while Ctrl is held
    };

    emacs_c_x_2: emacs_c_x_2 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp N>         // Tap 'x' while Ctrl is held
            , <&macro_release &kp LCTRL> // Release Ctrl
            , <&macro_tap &kp N2>;         // Tap 'k' while Ctrl is held
    };


    emacs_c_x_1: emacs_c_x_1 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp N>         // Tap 'x' while Ctrl is held
            , <&macro_release &kp LCTRL> // Release Ctrl
            , <&macro_tap &kp N1>;         // Tap 'k' while Ctrl is held
    };

    emacs_c_x_0: emacs_c_x_0 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp N>         // Tap 'x' while Ctrl is held
            , <&macro_release &kp LCTRL> // Release Ctrl
            , <&macro_tap &kp N0>;         // Tap 'k' while Ctrl is held
    };
    
    emacs_c_x_k: emacs_c_x_k {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp N>         // Tap 'x' while Ctrl is held
            , <&macro_release &kp LCTRL> // Release Ctrl
            , <&macro_tap &kp K>         // Tap 'k' while Ctrl is held
            , <&macro_tap &kp RET>;      // Tap 'Enter' while Ctrl is held
    };

    emacs_c_x_m: emacs_c_x_m {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp N>         // Tap 'x' while Ctrl is held
            , <&macro_release &kp LCTRL> // Release Ctrl
            , <&macro_tap &kp M>         // Tap 'k' while Ctrl is held
            , <&macro_tap &kp RET>;      // Tap 'Enter' while Ctrl is held
    };

    emacs_c_x_p: emacs_c_x_p {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp N>         // Tap 'x' while Ctrl is held
            , <&macro_release &kp LCTRL> // Release Ctrl
            , <&macro_tap &kp P>;        // Tap 'p' while Ctrl is held
    };

    emacs_c_u_n_1: emacs_c_u_n_1 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp U>         // Tap 'u' while Ctrl is held
            , <&macro_release &kp LCTRL> // Release Ctrl
            , <&macro_tap &kp MINUS>     // Tap '-' while Ctrl is held
            , <&macro_tap &kp N1>;       // Tap '1' while Ctrl is held
    };

        emacs_c_x_c_f: emacs_c_x_c_f {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>   // Press Ctrl
                , <&macro_tap &kp N>         // Tap 'x' while Ctrl is held
                , <&macro_tap &kp F>         // Tap 'f' while Ctrl is held
                , <&macro_release &kp LCTRL> // Release Ctrl
                ;
        };


    emacs_m_n_1: emacs_m_n_1 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LALT>   // Press Alt
            , <&macro_tap &kp MINUS>    // Tap '-' while Alt is held
            , <&macro_tap &kp N1>       // Tap '1' while Alt is held
            , <&macro_release &kp LALT>; // Release Alt
    };

    emacs_c_c_g_m: emacs_c_c_g_m {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp C>         // Tap 'c' while Ctrl is held
            , <&macro_release &kp LCTRL>// Release Ctrl
            , <&macro_tap &kp G>         // Tap 'c' again while Ctrl is held
            , <&macro_tap &kp M>;         // Tap 'c' again while Ctrl is held
    };

s_o: s_o {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings
        = <&mo_press &kp RGUI>
        , <&mo_tap &kp O>
        , <&mo_release &kp RGUI>
        ;
};

s_y: s_y {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings
        = <&mo_press &kp RGUI>
        , <&mo_tap &kp Y>
        , <&mo_release &kp RGUI>
        ;
};

s_l: s_l {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings
        = <&mo_press &kp RGUI>
        , <&mo_tap &kp L>
        , <&mo_release &kp RGUI>
        ;
};

s_j: s_j {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings
        = <&mo_press &kp RGUI>
        , <&mo_tap &kp J>
        , <&mo_release &kp RGUI>
        ;
};

s_m: s_m {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings
        = <&mo_press &kp RGUI>
        , <&mo_tap &kp M>
        , <&mo_release &kp RGUI>
        ;
};

s_k: s_k {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings
        = <&mo_press &kp RGUI>
        , <&mo_tap &kp K>
        , <&mo_release &kp RGUI>
        ;
};

s_h: s_h {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings
        = <&mo_press &kp RGUI>
        , <&mo_tap &kp H>
        , <&mo_release &kp RGUI>
        ;
};

s_w: s_w {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings
        = <&mo_press &kp RGUI>
        , <&mo_tap &kp W>
        , <&mo_release &kp RGUI>
        ;
};

s_n: s_n {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings
        = <&mo_press &kp RGUI>
        , <&mo_tap &kp N>
        , <&mo_release &kp RGUI>
        ;
};

s_x: s_x {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings
        = <&mo_press &kp RGUI>
        , <&mo_tap &kp X>
        , <&mo_release &kp RGUI>
        ;
};

    emacs_c_x_p_c: emacs_c_x_p_c {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp N>         // Tap 'c' while Ctrl is held
            , <&macro_release &kp LCTRL> // Release Ctrl
            , <&macro_tap &kp P>         // Tap 'c' again while Ctrl is held
            , <&macro_tap &kp C>;        // Tap 'c' again while Ctrl is held
    };

    emacs_c_x_c_b: emacs_c_x_c_b {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp N>         // Tap 'n' while Ctrl is held
            , <&macro_tap &kp B>         // Tap 'b' while Ctrl is held
            , <&macro_release &kp LCTRL>; // Release Ctrl
    };

    emacs_c_g: emacs_c_g {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_press &kp LCTRL>   // Press Ctrl
            , <&macro_tap &kp G>         // Tap 'g' while Ctrl is held
            , <&macro_release &kp LCTRL>; // Release Ctrl
    };

    qq: qq_macro {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp N2 &kp N7 &kp N3 &kp N0 &kp N6 &kp N4 &kp N7 &kp N0 &kp N5 &kp N2>;
    };


    id: id_macro {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap 
                &kp N5 &kp N0 &kp N0 &kp N1 &kp N1 &kp N2 &kp N2 &kp N0 &kp N0 &kp N2 &kp N1 &kp N1 
                &kp N0 &kp N4 &kp N0 &kp N9 &kp N9 &kp KP_MULTIPLY>;
    };

    email: email_macro {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap 
                &kp G &kp T &kp K &kp N &kp D &kp C &kp B &kp F &kp H &kp R 
                &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
    };

    phone: phone_macro {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings
            = <&macro_tap &kp N1 &kp N3 &kp N3 &kp N0 &kp N8 &kp N3 &kp N2 &kp N9 &kp N2 &kp N4 &kp N2>;
    };
};


    behaviors {
        hm: homerow_mods {
            compatible               = "zmk,behavior-hold-tap";
            #binding-cells           = <2>;
            tapping-term-ms          = <250>;
            quick-tap-ms             = <QUICK_TAP_MS>;
            flavor                   = "balanced";
            require-prior-idle-ms    = <130>;
            // hold-trigger-on-release;  / 只有松开后才触发 Hold，减少意外连击
            bindings                 = <&kp>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
                &none   &kp Q          &kp W          &kp F          &kp P          &kp B         &kp J          &kp L         &kp U         &kp Y         &kp SQT     &none
                &none   &hm LGUI A     &hm LALT R     &hm LCTRL S    &hm LSHIFT T   &kp G         &kp M          &hm RSHIFT N  &hm RCTRL E   &hm RALT I    &hm RGUI O  &none
                &none   &kp Z          &kp X          &kp C          &kp D          &kp V         &kp K          &kp H         &kp COMMA     &kp DOT       &kp FSLH    &none
                                  &lt MEDIA ESC  &lt NAV SPACE  &lt MOUSE TAB  &lt SYM RET  &lt NUM BSPC  &lt FUN DEL
            >;
        };


// copy/down/up/fullscreen/toggle/ cduftabr 
        Nav {
            bindings = <
                &none   &emacs_c_c_7        &emacs_c_x_7        &emacs_c_x_8        &emacs_c_x_9        &s_j        &kp K_REDO    &kp K_CUT   &kp K_COPY    &kp K_PASTE    &kp K_UNDO  &none
                &none   &kp LGUI     &kp LALT     &kp LCTRL    &kp LSHIFT   &s_r        &s_m         &kp LEFT    &kp DOWN      &kp UP        &kp RIGHT   &none
                &none   &emacs_c_c_8        &emacs_c_x_1        &emacs_c_x_2        &s_c        &s_tab        &kp INSERT    &kp HOME    &kp PG_DN     &kp PG_UP     &kp END     &none
                                    &trans       &trans       &trans       &s_u       &s_d       &s_q
            >;
        };

        Numbers {
            bindings = <
                &none   &kp LBKT      &kp N7      &kp N8      &kp N9      &kp RBKT     &s_o       &s_z      &emacs_c_x_o      &emacs_c_x_x_t      &s_y      &none
                &none   &kp SEMI      &kp N4      &kp N5      &kp N6      &kp EQUAL    &s_l       &kp RSHIFT &kp RCTRL  &kp RALT   &kp RGUI   &none
                &none   &kp GRAVE     &kp N1      &kp N2      &kp N3      &kp BSLH     &s_k         &s_h       &s_w       &s_n       &s_x       &none
                                        &kp DOT    &kp N0      &kp MINUS   &trans      &trans      &trans
            >;
        };

        Mouse {
            bindings = <
                &none   &emacs_c_c_g_m    &emacs_c_x_c_a  &explain_chinese  &emacs_c_x_p     &emacs_c_x_c_b     &emacs_c_x_j       &emacs_c_x_l         &mkp MB4       &mkp MB5      &none      &none
                &none   &emacs_c_x_c_sm   &emacs_c_g      &emacs_c_x_c_f    &emacs_c_x_b     &emacs_c_x_g         &emacs_c_x_m       &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none
                &none   &emacs_c_c_c_dt   &emacs_m_n_1    &emacs_c_x_p_c    &emacs_c_x_d     &emacs_c_x_p_s         &emacs_c_x_k &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &none
                                            &trans     &emacs_c_x_0     &trans      &mkp RCLK   &mkp LCLK   &mkp MCLK
            >;
        };

        Symbols {
            bindings = <
                &none   &kp LBRC      &kp AMPS     &kp ASTRK   &kp LPAR     &kp RBRC     &none       &none       &none       &none       &none       &none
                &none   &kp COLON     &kp DLLR     &kp PRCNT   &kp CARET    &kp PLUS     &none       &kp RSHIFT  &kp RCTRL   &kp RALT    &kp RGUI    &none
                &none   &kp TILDE     &kp EXCL     &kp AT      &kp HASH     &kp PIPE     &none       &id      &qq      &email &phone  &none
                                        &kp LPAR     &kp RPAR    &kp UNDER   &trans      &trans      &trans
            >;
        };

        Function {
            bindings = <
                &none   &kp F12      &kp F7      &kp F8      &kp F9      &kp PRINTSCREEN  &kp F18     &kp F19      &kp F20      &kp F21      &none      &none
                &none   &kp F11      &kp F4      &kp F5      &kp F6      &kp SCROLLLOCK   &kp F17      &kp RSHIFT  &kp RCTRL   &kp RALT    &kp RGUI      &none
                &none   &kp F10      &kp F1      &kp F2      &kp F3      &kp PAUSE_BREAK  &kp F16       &kp F13      &kp F14      &kp F15      &none      &none
                                         &trans   &trans   &trans      &trans          &trans      &trans
            >;
        };

        media {
            bindings = <
                &none   &none      &none      &none      &none      &none         &kp C_REWIND    &none      &none      &none      &kp C_FAST_FORWARD  &none
                &none   &kp LGUI   &kp LALT   &kp LCTRL  &kp LSHIFT &none         &kp C_PREVIOUS  &kp C_VOL_DN  &kp C_VOLUME_UP  &kp C_NEXT  &none
                &none   &none      &none      &none      &none      &none         &out OUT_TOG    &kp LANGUAGE_5  &none   &none   &none   &none
                                      &trans   &trans   &trans    &kp C_PLAY_PAUSE  &kp C_STOP  &kp C_MUTE
            >;
        };
    };
};
